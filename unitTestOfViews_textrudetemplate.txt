CREATE PROCEDURE [{{model.sutSchema}}__{{model.sutObject}}].[{{model.testName}}]
AS
BEGIN
	--ASSEMBLE
	IF OBJECT_ID('[{{model.sutSchema}}__{{model.sutObject}}].ACTUAL') IS NOT NULL DROP TABLE [{{model.sutSchema}}__{{model.sutObject}}].ACTUAL;
	IF OBJECT_ID('[{{model.sutSchema}}__{{model.sutObject}}].EXPECTED') IS NOT NULL DROP TABLE [{{model.sutSchema}}__{{model.sutObject}}].EXPECTED;

{{for f in model.fakes}}
	EXECUTE tSQLt.FakeTable @TableName = '[{{f.schemaName}}].[{{f.objectName}}]';
{{n= 0;for i in f.columns[0].values}}
    EXECUTE [TestHelpers].[DataBuilder_{{f.schemaName}}_{{f.objectName}}] {{m=0; for c in f.columns}}{{if m != 0}}{{","}}{{end}}{{"@"}}{{c.columnName}} = '{{c.values[n]}}' {{m=m+1;end}};{{n = n + 1;end}}
{{end}}
	
	--ACT
	SELECT{{p=0;for ec in model.expectedColumns}}
    {{if p == 0}}{{" "}}{{end}}{{if p != 0}}{{","}}{{end}}[{{ec.columnName}}]{{p=p+1;end}}	
    INTO [{{model.sutSchema}}__{{model.sutObject}}].ACTUAL
	FROM [{{model.sutSchema}}].[{{model.sutObject}}];

	--ASSERT
	CREATE TABLE [{{model.sutSchema}}__{{model.sutObject}}].EXPECTED (
        {{p=0;for ec in model.expectedColumns}}
        {{if p == 0}}{{" "}}{{end}}{{if p != 0}}{{","}}{{end}}[{{ec.columnName}}] {{ec.sqlDataType}}{{p=p+1;end}}
    );
	INSERT INTO [{{model.sutSchema}}__{{model.sutObject}}].EXPECTED (
        {{p=0;for ec in model.expectedColumns}}
        {{if p == 0}}{{" "}}{{end}}{{if p != 0}}{{","}}{{end}}[{{ec.columnName}}]{{p=p+1;end}}
    ) VALUES (
{{n= 0;for i in model.expectedColumns[0].values}}
        {{if n == 0}}{{" "}}{{end}}{{if n != 0}}{{","}}{{end}}({{m=0; for ec in model.expectedColumns}}{{if m != 0}}{{","}}{{end}}'{{ec.values[n]}}' {{m=m+1;end}}){{n = n + 1;end}}
	
    );

	EXECUTE [tSQLt].[AssertEqualsTable] @Expected = '[{{model.sutSchema}}__{{model.sutObject}}].EXPECTED', @Actual = '[{{model.sutSchema}}__{{model.sutObject}}].ACTUAL';

END

/****
Script autogenerated from JSON and textrude.
This test compares the contents of EXPECTED and ACTUAL.
****/
